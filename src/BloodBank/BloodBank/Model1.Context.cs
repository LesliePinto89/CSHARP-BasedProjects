//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BloodBank
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UserRegistrationDBEntities : DbContext
    {
        public UserRegistrationDBEntities()
            : base("name=UserRegistrationDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DonorDetail> DonorDetails { get; set; }
        public virtual DbSet<tableUser> tableUsers { get; set; }
    
        public virtual int AddBloods(string donorID, Nullable<System.DateTime> dOB, string gender, string ethnicity, string bloodType, string rHFactor, string medicalHistory)
        {
            var donorIDParameter = donorID != null ?
                new ObjectParameter("DonorID", donorID) :
                new ObjectParameter("DonorID", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var ethnicityParameter = ethnicity != null ?
                new ObjectParameter("Ethnicity", ethnicity) :
                new ObjectParameter("Ethnicity", typeof(string));
    
            var bloodTypeParameter = bloodType != null ?
                new ObjectParameter("BloodType", bloodType) :
                new ObjectParameter("BloodType", typeof(string));
    
            var rHFactorParameter = rHFactor != null ?
                new ObjectParameter("RHFactor", rHFactor) :
                new ObjectParameter("RHFactor", typeof(string));
    
            var medicalHistoryParameter = medicalHistory != null ?
                new ObjectParameter("MedicalHistory", medicalHistory) :
                new ObjectParameter("MedicalHistory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloods", donorIDParameter, dOBParameter, genderParameter, ethnicityParameter, bloodTypeParameter, rHFactorParameter, medicalHistoryParameter);
        }
    
        public virtual int AddUsers(string firstName, string lastName, string contact, string address, string username, string password, string email)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUsers", firstNameParameter, lastNameParameter, contactParameter, addressParameter, usernameParameter, passwordParameter, emailParameter);
        }
    }
}
